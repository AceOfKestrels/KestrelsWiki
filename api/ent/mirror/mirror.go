// Code generated by ent, DO NOT EDIT.

package mirror

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the mirror type in the database.
	Label = "mirror"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOriginPath holds the string denoting the originpath field in the database.
	FieldOriginPath = "origin_path"
	// FieldTargetPath holds the string denoting the targetpath field in the database.
	FieldTargetPath = "target_path"
	// Table holds the table name of the mirror in the database.
	Table = "mirrors"
)

// Columns holds all SQL columns for mirror fields.
var Columns = []string{
	FieldID,
	FieldOriginPath,
	FieldTargetPath,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// OriginPathValidator is a validator for the "originPath" field. It is called by the builders before save.
	OriginPathValidator func(string) error
)

// OrderOption defines the ordering options for the Mirror queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOriginPath orders the results by the originPath field.
func ByOriginPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOriginPath, opts...).ToFunc()
}

// ByTargetPath orders the results by the targetPath field.
func ByTargetPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetPath, opts...).ToFunc()
}
